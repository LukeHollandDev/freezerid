generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Freezer ID specific models

model Item {
  id          Int       @id @default(autoincrement())
  user_id     String?
  item_id     String    @db.VarChar(255)
  name        String    @db.VarChar(255)
  description String    @db.VarChar(255)
  added       DateTime? @db.Timestamp(6)
  removed     DateTime? @db.Timestamp(6)
  modified    DateTime? @db.Timestamp(6)
  tags        Tag[]
  User        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255)
  items Item[]
}

// NextAuth models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  items         Item[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
